
image: python:3.9.5

services:
  - name: postgres:latest
    alias: db_pg

variables:
  POSTGRES_DB: sfs_stack_pg1
  POSTGRES_USER: sfs_stack_usr
  POSTGRES_PASSWORD: testpassword
  POSTGRES_HOST_AUTH_METHOD: trust
  DB_HOST: db_pg
  DB_NAME: sfs_stack_pg1
  DB_USER: sfs_stack_usr
  DB_PASS: testpassword

before_script:
  - pip install -r requirements.txt
  - ./manage.py wait_for_db
  - ./manage.py makemigrations
  - ./manage.py migrate

stages:
  - Tests
  - Deploy

pyre:
  stage: Tests
  script:
    - pyre --search-path "/usr/local/lib/python3.9/site-packages"

pytest:
  stage: Tests
  script:
    - export PYTHONPATH="$PYTHONPATH:."
    - ./manage.py collectstatic --noinput
    - pytest tests/

deploy:
  stage: Tests # change to Deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "cd"'
      when: manual
  script:
    - echo $SSH_PRIVATE_KEY #  remove obviously
    - echo $SSH_KNOWN_HOSTS
    - eval $(ssh-agent -s)
    - echo "echo $SSH_PASSWORD" > ./print_pass
    - chmod +x ./print_pass # https://stackoverflow.com/questions/38354773/how-to-pass-an-ssh-key-passphrase-via-environment-variable
    - echo -e "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=":0.0" SSH_ASKPASS=./print_pass setsid ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo -e
      "echo '# DEPLOYING'\n
       cd ~/sites/dev\n
       echo '# stopping docker-compose'\n
       USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose stop > /dev/null\n
       if [[ \"\$(git rev-parse --abbrev-ref HEAD)\" != \"staging\" ]];\n
       then\n
         echo '# checking out staging'\n
         git checkout staging\n
       fi\n
       echo '# pulling from staging'\n
       git stash > /dev/null\n
       git pull --no-rebase git@git.coop:animorph-coop/shared-futures-space.git > /dev/null\n
       if [[ \$? -ne 0 ]];\n
       then\n
         echo '# FAILED TO PULL FROM STAGING (IS THE SSH KEY .ssh/id_rsa.pub STILL ALLOWED BY AN ACCOUNT WITH ACCESS TO THE REPOSITORY?)'\n
         echo '# RESTARTING DOCKER_COMPOSE WITHOUT DEPLOYING'\n
         USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose start > /dev/null\n
         pull_failed=1\n
       else\n
         pull_failed=0\n
       fi\n
       if [[ \$pull_failed -eq 1 ]];\n
       then\n
         echo '# COULD NOT PULL FROM STAGING'\n
         echo '# DEPLOYMENT FAILED'\n
       else\n
         local_files_path='/home/dev/sites/dev_data'\n
         echo '# installing local settings files from ' \$local_files_path\n
         cp \$local_files_path/app_variables.env /home/dev/sites/dev/\n
         cp \$local_files_path/db_pg_variables.env /home/dev/sites/dev/\n
         cp \$local_files_path/local.py /home/dev/sites/dev/sfs/settings/\n
         cp \$local_files_path/settings.py /home/dev/sites/dev/sfs/settings/\n
         echo '# REBUILDING CONTAINERS (MAY TAKE SOME TIME)'\n
         USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose rm -f\n
         USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose build\n
         echo '# restarting docker-compose'\n
         USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose up -d\n
         docker ps\n
         echo '# collecting static files'\n
         echo 'python3 manage.py collectstatic --noinput\n' | USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose exec -T app sh\n
         echo \"# running tests locally (may take a minute)\"\n
         echo\n
         echo 'exit_code=0\n
               pytest tests || exit_code=\$?\n
               exit \$exit_code' | USER_ID=\$(id -u) GROUP_ID=\$(id -g) docker-compose exec -T app sh\n
         if [[ \$? -ne 0 ]];\n
         then\n
           echo '########################'\n
           echo '#  TESTS FAIL LOCALLY!'\n
           echo '########################'\n
           echo '# this requires attention!'\n
           echo '# tests are - docker-compose exec app pytest tests/'\n
           exit 1\n
         else\n
           echo '# TESTS SUCCEED, DEPLOYED SUCCESSFULLY'\n
         fi
       fi" > deploy_script
    - scp deploy_script asa@sharedfutures.webarch.net:/home/asa/deploy_script
    - ssh asa@sharedfutures.webarch.net sudo cp /home/asa/deploy_script /home/dev/deploy_script
    - ssh asa@sharedfutures.webarch.net sudo chmod a+x /home/dev/deploy_script
    - ssh asa@sharedfutures.webarch.net sudo chown dev /home/dev/deploy_script
    - ssh asa@sharedfutures.webarch.net sudo su - dev -c "/home/dev/deploy_script"
