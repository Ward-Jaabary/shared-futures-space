---
- hosts: virtualmachines
  become: yes
  vars:
    debug_mode: "{{ lookup('env', 'DEBUG_MODE') }}"
    vite_dev_mode: "{{ lookup('env', 'VITE_DEV_MODE') }}"
    domain_name: "{{ lookup('env', 'DOMAIN_NAME') }}"
    secret_key: "{{ lookup('env', 'SECRET_KEY') }}"
    postgres_password: "{{ lookup('env', 'POSTGRES_PASSWORD') }}"
    celery_broker_url: "{{ lookup('env', 'CELERY_BROKER_URL') }}"
    celery_result_backend: "{{ lookup('env', 'CELERY_RESULT_BACKEND') }}"
    enable_social_login: "{{ lookup('env', 'ENABLE_ALLAUTH_SOCIAL_LOGIN') }}"
    google_client_id: "{{ lookup('env', 'GOOGLE_CLIENT_ID') }}"
    google_secret: "{{ lookup('env', 'GOOGLE_SECRET') }}"
    email_host: "{{ lookup('env', 'EMAIL_HOST') }}"
    email_host_user: "{{ lookup('env', 'EMAIL_HOST_USER') }}"
    email_host_password: "{{ lookup('env', 'EMAIL_HOST_PASSWORD') }}"
    default_from_email: "{{ lookup('env', 'DEFAULT_FROM_EMAIL') }}"
    weather_api_key: "{{ lookup('env', 'WEATHER_API_KEY') }}"
  tasks:

    # postgresql setup
    - name: pg user
      community.general.postgresql_user:
        name: sfs_user
        password: "{{ postgres_password }}"
        expires: infinity
        state: present
      become_user: postgres
    - name: pg database
      community.general.postgresql_db:
        name: sfs_db
        owner: sfs_user
        state: present
      become_user: postgres
    - name: pg permissions
      community.postgresql.postgresql_privs:
        db: sfs_db
        privs: ALL
        objs: ALL_IN_SCHEMA
        role: sfs_user
        grant_option: true
      become_user: postgres

    # deploy user and directory
    - name: www directory
      ansible.builtin.file:
        path: /var/www
        state: directory
        mode: '0755'
    - name: create user
      ansible.builtin.user:
        name: deploy
        password: ""
        shell: /bin/bash
        groups:
          - sudo
          - www-data
        append: yes
        createhome: yes
        skeleton: '/etc/skel'
        generate_ssh_key: yes
        ssh_key_type: 'ed25519'
    - name: www ownership
      ansible.builtin.file:
        path: /var/www
        owner: deploy
        group: www-data
        recurse: yes

    # postgresql backups
    - name: backups dir
      ansible.builtin.file:
        path: /home/deploy/backups
        state: directory
        mode: '0755'
      become_user: deploy
    - name: Add job to crontab
      ansible.builtin.cron:
        name: backup postgres dump
        minute: "00"
        hour: "5"
        job: "PGPASSWORD={{ postgres_password }} /var/www/shared-futures-space/backup-database.sh"
      become_user: deploy

    # repository
    - name: clone
      ansible.builtin.git:
        repo: https://github.com/animorphcoop/shared-futures-space
        dest: /var/www/shared-futures-space
        version: development
      become_user: deploy
    - name: dependencies
      ansible.builtin.pip:
        virtualenv_command: python3 -m venv
        virtualenv: /var/www/shared-futures-space/venv
        requirements: /var/www/shared-futures-space/requirements.txt
      become_user: deploy
    - name: npm
      community.general.npm:
        path: /var/www/shared-futures-space
      become_user: deploy
    - name: clear working dir
      # we discard changes because npm install changes package-lock.json
      ansible.builtin.shell:
        cmd: git checkout -- .
        chdir: /var/www/shared-futures-space
      args:
        executable: /bin/bash
      become_user: deploy

    # systemd
    - name: mkdir uwsgi
      ansible.builtin.file:
        path: /etc/uwsgi
        state: directory
        mode: '0755'
    - name: uwsgi template
      ansible.builtin.template:
        src: ../templates/sfs.uwsgi.ini.j2
        dest: /etc/uwsgi/sfs.uwsgi.ini
        owner: root
        group: root
        mode: '0644'
    - name: web systemd template
      ansible.builtin.template:
        src: ../templates/sfs.service.j2
        dest: /etc/systemd/system/sfs.service
        owner: root
        group: root
        mode: '0644'
    - name: worker systemd template
      ansible.builtin.template:
        src: ../templates/sfsworker.service.j2
        dest: /etc/systemd/system/sfsworker.service
        owner: root
        group: root
        mode: '0644'
    - name: systemd reload
      ansible.builtin.systemd:
        daemon_reload: true
    - name: web systemd enable
      ansible.builtin.systemd:
        name: sfs
        enabled: yes
    - name: web systemd start
      ansible.builtin.systemd:
        name: sfs
        state: restarted
    - name: worker systemd enable
      ansible.builtin.systemd:
        name: sfsworker
        enabled: yes
    - name: worker systemd start
      ansible.builtin.systemd:
        name: sfsworker
        state: restarted

    # deployment specific
    - name: npm run build
      ansible.builtin.shell:
        cmd: npm run build
        chdir: /var/www/shared-futures-space
      args:
        executable: /bin/bash
      become_user: deploy
    - name: collectstatic
      ansible.builtin.shell:
        cmd: |
          source venv/bin/activate
          python3 manage.py collectstatic --no-input
        chdir: /var/www/shared-futures-space
      args:
        executable: /bin/bash
      become_user: deploy
    - name: migrations
      ansible.builtin.shell:
        cmd: |
          source venv/bin/activate
          export POSTGRES_HOST=localhost
          export POSTGRES_DB=sfs_db
          export POSTGRES_USER=sfs_user
          export POSTGRES_PASSWORD={{ postgres_password }}
          python3 manage.py migrate
        chdir: /var/www/shared-futures-space
      args:
        executable: /bin/bash
      become_user: deploy
    - name: uwsgi restart
      ansible.builtin.systemd:
        name: sfs
        state: restarted
    - name: caddy restart
      ansible.builtin.systemd:
        name: caddy
        state: restarted
